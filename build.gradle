buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.jojoldu.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')     // 롬복 등록
    compile('org.springframework.boot:spring-boot-starter-data-jpa')    // 스프링 부트용 Spring Data JPA 추상화 라이브러리
    // 인메모리 관계형 데이터베이스
    // 별도의 설치가 필요없이 프로젝트 의존성으로만 관리 할 수 있음
    // 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 사용됨
    compile('com.h2database:h2')
    // 머스테치 스타터 의존성
    compile('org.springframework.boot:spring-boot-starter-mustache')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    // 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
    // spring-security-oauth2-client 와 spring-security-oauth2-jose 를 기본적으로 관리
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')

    // 애플리케이션을 재실행하면 로그인이 풀리는데, 이는 세션이 내장 톰캣의 메모리에 저장되기 때문
    // 내장 톰캣처럼 애플리케이션 실행 시 실행되는 구조에선 항상 초기화가 됨. 즉 배포할 때마다 톰캣이 재시작 됨
    // 또한 2대 이상의 서버에서 서비스화하고 있다면 톰캣마다 세션 동기화 설정을 해야하는데 보통 현업에서 3가지 중 한가지를 선택함
    // 1. 톰캣 세션 사용, 2. MySQL 같은 데이터베이스를 세션 저장소로 사용, 3. Redis, Memcached 와 같은 메모리 DB 를 세션 저장소로 사용
    // 데이터베이스를 세션 저장소로 사용하는 방식 진행
    compile('org.springframework.session:spring-session-jdbc')

    // 스프링 시큐리티를 위한 여러 도구를 지원
    testCompile("org.springframework.security:spring-security-test")
    
    // MariaDB 드라이버
    compile("org.mariadb.jdbc:mariadb-java-client")

}
